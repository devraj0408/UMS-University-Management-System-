# -*- coding: utf-8 -*-
"""UEM2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z4_pdJenUDvEwHchmwf05jjuyL8wWnz7
"""

import json

# --- Person Base Class ---
class Person:
    def __init__(self, id: str, name: str):
        self._id = id
        self._name = name

    @property
    def id(self):
        return self._id

    @property
    def name(self):
        return self._name

    def __str__(self):
        return f"ID: {self._id}, Name: {self._name}"

    def to_dict(self):
        return {
            "id": self._id,
            "name": self._name,
            "type": "person"
        }

# --- Student Class ---
class Student(Person):
    def __init__(self, id: str, name: str, major: str):
        super().__init__(id, name)
        self._major = major
        self._enrolled_course_codes = []

    @property
    def major(self):
        return self._major

    @major.setter
    def major(self, value):
        self._major = value

    @property
    def enrolled_course_codes(self):
        return self._enrolled_course_codes.copy()

    def enroll_course(self, course_code: str):
        if course_code not in self._enrolled_course_codes:
            self._enrolled_course_codes.append(course_code)

    def drop_course(self, course_code: str):
        if course_code in self._enrolled_course_codes:
            self._enrolled_course_codes.remove(course_code)

    def display_details(self):
        return (f"{super().__str__()}, Major: {self._major}, "
                f"Enrolled Courses: {len(self._enrolled_course_codes)}")

    def to_dict(self):
        return {
            "id": self._id,
            "name": self._name,
            "major": self._major,
            "enrolled_course_codes": self._enrolled_course_codes,
            "type": "student"
        }

# --- Faculty Class ---
class Faculty(Person):
    def __init__(self, id: str, name: str, department: str):
        super().__init__(id, name)
        self._department = department
        self._assigned_course_codes = []

    @property
    def department(self):
        return self._department

    @department.setter
    def department(self, value):
        self._department = value

    @property
    def assigned_course_codes(self):
        return self._assigned_course_codes.copy()

    def assign_course(self, course_code: str):
        if course_code not in self._assigned_course_codes:
            self._assigned_course_codes.append(course_code)

    def unassign_course(self, course_code: str):
        if course_code in self._assigned_course_codes:
            self._assigned_course_codes.remove(course_code)

    def display_details(self):
        return (f"{super().__str__()}, Department: {self._department}, "
                f"Assigned Courses: {len(self._assigned_course_codes)}")

    def to_dict(self):
        return {
            "id": self._id,
            "name": self._name,
            "department": self._department,
            "assigned_course_codes": self._assigned_course_codes,
            "type": "faculty"
        }

# --- Course Class ---
class Course:
    def __init__(self, course_code: str, title: str, credits: int, prerequisites=None):
        self._course_code = course_code
        self._title = title
        self._credits = credits
        self._prerequisite_codes = prerequisites if prerequisites else []
        self._enrolled_student_ids = []
        self._assigned_faculty_id = None

    @property
    def course_code(self):
        return self._course_code

    @property
    def title(self):
        return self._title

    @property
    def credits(self):
        return self._credits

    @property
    def prerequisite_codes(self):
        return self._prerequisite_codes.copy()

    @property
    def enrolled_student_ids(self):
        return self._enrolled_student_ids.copy()

    @property
    def assigned_faculty_id(self):
        return self._assigned_faculty_id

    @assigned_faculty_id.setter
    def assigned_faculty_id(self, value):
        self._assigned_faculty_id = value

    def add_prerequisite(self, prerequisite_code: str):
        if prerequisite_code not in self._prerequisite_codes:
            self._prerequisite_codes.append(prerequisite_code)

    def add_student_id(self, student_id: str):
        if student_id not in self._enrolled_student_ids:
            self._enrolled_student_ids.append(student_id)

    def remove_student_id(self, student_id: str):
        if student_id in self._enrolled_student_ids:
            self._enrolled_student_ids.remove(student_id)

    def assign_faculty_id(self, faculty_id: str):
        self._assigned_faculty_id = faculty_id

    def unassign_faculty_id(self):
        self._assigned_faculty_id = None

    def display_details(self):
        return (f"Course Code: {self._course_code}, Title: {self._title}, Credits: {self._credits}, "
                f"Prerequisites: {self._prerequisite_codes}, "
                f"Enrolled Students: {len(self._enrolled_student_ids)}, "
                f"Assigned Faculty: {self._assigned_faculty_id}")

    def to_dict(self):
        return {
            "course_code": self._course_code,
            "title": self._title,
            "credits": self._credits,
            "prerequisite_codes": self._prerequisite_codes,
            "enrolled_student_ids": self._enrolled_student_ids,
            "assigned_faculty_id": self._assigned_faculty_id
        }

# --- University Class ---
class University:
    def __init__(self, student_file='students.json', faculty_file='faculty.json', course_file='courses.json'):
        self._students = {}
        self._faculty = {}
        self._courses = {}
        self._student_file = student_file
        self._faculty_file = faculty_file
        self._course_file = course_file
        self._load_data()

    def _load_data(self):
        try:
            with open(self._student_file, 'r') as f:
                students = json.load(f)
                for s in students:
                    student = Student(s['id'], s['name'], s['major'])
                    student._enrolled_course_codes = s.get('enrolled_course_codes', [])
                    self._students[student.id] = student
        except FileNotFoundError:
            pass

        try:
            with open(self._faculty_file, 'r') as f:
                faculty = json.load(f)
                for fac in faculty:
                    f_obj = Faculty(fac['id'], fac['name'], fac['department'])
                    f_obj._assigned_course_codes = fac.get('assigned_course_codes', [])
                    self._faculty[f_obj.id] = f_obj
        except FileNotFoundError:
            pass

        try:
            with open(self._course_file, 'r') as f:
                courses = json.load(f)
                for c in courses:
                    course = Course(c['course_code'], c['title'], c['credits'], c.get('prerequisite_codes', []))
                    course._enrolled_student_ids = c.get('enrolled_student_ids', [])
                    course._assigned_faculty_id = c.get('assigned_faculty_id', None)
                    self._courses[course.course_code] = course
        except FileNotFoundError:
            pass

    def _save_data(self):
        with open(self._student_file, 'w') as f:
            json.dump([s.to_dict() for s in self._students.values()], f, indent=2)
        with open(self._faculty_file, 'w') as f:
            json.dump([f.to_dict() for f in self._faculty.values()], f, indent=2)
        with open(self._course_file, 'w') as f:
            json.dump([c.to_dict() for c in self._courses.values()], f, indent=2)

    def add_student(self, student: Student):
        if student.id in self._students:
            return False
        self._students[student.id] = student
        self._save_data()
        return True

    def remove_student(self, student_id: str):
        student = self._students.get(student_id)
        if not student or student._enrolled_course_codes:
            return False
        del self._students[student_id]
        self._save_data()
        return True

    def add_faculty(self, faculty: Faculty):
        if faculty.id in self._faculty:
            return False
        self._faculty[faculty.id] = faculty
        self._save_data()
        return True

    def remove_faculty(self, faculty_id: str):
        faculty = self._faculty.get(faculty_id)
        if not faculty or faculty._assigned_course_codes:
            return False
        del self._faculty[faculty_id]
        self._save_data()
        return True

    def add_course(self, course: Course):
        if course.course_code in self._courses:
            return False
        self._courses[course.course_code] = course
        self._save_data()
        return True

    def remove_course(self, course_code: str):
        course = self._courses.get(course_code)
        if not course or course._enrolled_student_ids:
            return False
        del self._courses[course_code]
        self._save_data()
        return True

    def enroll_student_in_course(self, student_id: str, course_code: str):
        student = self._students.get(student_id)
        course = self._courses.get(course_code)
        if not student or not course:
            return False
        for pre in course.prerequisite_codes:
            if pre not in student._enrolled_course_codes:
                return False
        student.enroll_course(course_code)
        course.add_student_id(student_id)
        self._save_data()
        return True

    def drop_student_from_course(self, student_id: str, course_code: str):
        student = self._students.get(student_id)
        course = self._courses.get(course_code)
        if not student or not course or course_code not in student._enrolled_course_codes:
            return False
        student.drop_course(course_code)
        course.remove_student_id(student_id)
        self._save_data()
        return True

    def assign_faculty_to_course(self, faculty_id: str, course_code: str):
        faculty = self._faculty.get(faculty_id)
        course = self._courses.get(course_code)
        if not faculty or not course:
            return False
        faculty.assign_course(course_code)
        course.assign_faculty_id(faculty_id)
        self._save_data()
        return True

    def unassign_faculty_from_course(self, faculty_id: str, course_code: str):
        faculty = self._faculty.get(faculty_id)
        course = self._courses.get(course_code)
        if not faculty or not course or course.assigned_faculty_id != faculty_id:
            return False
        faculty.unassign_course(course_code)
        course.unassign_faculty_id()
        self._save_data()
        return True

    def get_course_roster(self, course_code: str):
        course = self._courses.get(course_code)
        if not course:
            return []
        return [self._students[sid] for sid in course.enrolled_student_ids if sid in self._students]

    def display_all_students(self):
        for student in self._students.values():
            print(student.display_details())

    def display_all_faculty(self):
        for faculty in self._faculty.values():
            print(faculty.display_details())

    def display_all_courses(self):
        for course in self._courses.values():
            print(course.display_details())

# --- Console Interface ---
def main():
    uni = University()
    while True:
        print("\n--- University Management System ---")
        print("1. Add Student")
        print("2. Add Faculty")
        print("3. Add Course")
        print("4. Enroll Student in Course")
        print("5. Drop Student from Course")
        print("6. Assign Faculty to Course")
        print("7. Unassign Faculty from Course")
        print("8. View Course Roster")
        print("9. Display All Students")
        print("10. Display All Faculty")
        print("11. Display All Courses")
        print("12. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            id = input("Student ID: ")
            name = input("Name: ")
            major = input("Major: ")
            student = Student(id, name, major)
            if uni.add_student(student):
                print("Student added.")
            else:
                print("Student ID already exists.")
        elif choice == "2":
            id = input("Faculty ID: ")
            name = input("Name: ")
            dept = input("Department: ")
            faculty = Faculty(id, name, dept)
            if uni.add_faculty(faculty):
                print("Faculty added.")
            else:
                print("Faculty ID already exists.")
        elif choice == "3":
            code = input("Course Code: ")
            title = input("Title: ")
            credits = int(input("Credits: "))
            prereqs = input("Prerequisites (comma separated codes, blank if none): ").split(",")
            prereqs = [p.strip() for p in prereqs if p.strip()]
            course = Course(code, title, credits, prereqs)
            if uni.add_course(course):
                print("Course added.")
            else:
                print("Course code already exists.")
        elif choice == "4":
            sid = input("Student ID: ")
            ccode = input("Course Code: ")
            if uni.enroll_student_in_course(sid, ccode):
                print("Student enrolled.")
            else:
                print("Enrollment failed (check prerequisites or IDs).")
        elif choice == "5":
            sid = input("Student ID: ")
            ccode = input("Course Code: ")
            if uni.drop_student_from_course(sid, ccode):
                print("Student dropped from course.")
            else:
                print("Drop failed (check IDs or enrollment).")
        elif choice == "6":
            fid = input("Faculty ID: ")
            ccode = input("Course Code: ")
            if uni.assign_faculty_to_course(fid, ccode):
                print("Faculty assigned to course.")
            else:
                print("Assignment failed (check IDs).")
        elif choice == "7":
            fid = input("Faculty ID: ")
            ccode = input("Course Code: ")
            if uni.unassign_faculty_from_course(fid, ccode):
                print("Faculty unassigned from course.")
            else:
                print("Unassignment failed (check IDs or assignment).")
        elif choice == "8":
            ccode = input("Course Code: ")
            roster = uni.get_course_roster(ccode)
            print("Course Roster:")
            for student in roster:
                print(student.display_details())
        elif choice == "9":
            uni.display_all_students()
        elif choice == "10":
            uni.display_all_faculty()
        elif choice == "11":
            uni.display_all_courses()
        elif choice == "12":
            print("Exiting.")
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()